# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c8bFWz2FbOeRGhncc20fCHQYOEzP9o0I
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder, MinMaxScaler
from sklearn.impute import KNNImputer
import seaborn as sns
import pickle
import os

df = pd.read_csv("/content/df_encoded.csv")
df

# Évaluer le modèle
mse = mean_squared_error(y_test, y_pred_binary)
r2 = r2_score(y_test, y_pred_binary)

print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")

# Afficher les coefficients du modèle
print(f"Coefficients: {model.coef_}")
print(f"Intercept: {model.intercept_}")

# Effectuer une cross-validation à 5 plis
cv_scores = cross_val_score(model, X, y, cv=5, scoring='neg_mean_squared_error')

# Convertir les scores en erreurs positives
mse_scores = -cv_scores

# Calculer la moyenne et l'écart-type des scores MSE
mean_mse = mse_scores.mean()
std_mse = mse_scores.std()

print(f"Mean MSE: {mean_mse}")
print(f"Standard Deviation of MSE: {std_mse}")

# Pour une métrique supplémentaire, comme le R^2
cv_r2_scores = cross_val_score(model, X, y, cv=5, scoring='r2')
mean_r2 = cv_r2_scores.mean()
std_r2 = cv_r2_scores.std()

print(f"Mean R^2 Score: {mean_r2}")
print(f"Standard Deviation of R^2 Score: {std_r2}")
